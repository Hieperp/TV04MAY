@using TotalPortal.Configuration

@model TotalPortal.Areas.Purchases.ViewModels.PurchaseOrderViewModel

<div id="popupWindow"></div>

<div>
    @(Html.Kendo().Grid<TotalModel.Models.PurchaseOrderIndex>()
            .Name("kendoGridIndex")
            .Columns(columns =>
            {
                columns.Bound(p => p.PurchaseOrderID).DisplayNameTitle().Hidden();
                columns.Bound(p => p.EntryDate).Title("Date").Format("{0:dd/MM/yyyy}").HtmlAttributes(new { @class = "grid-column-center" }).Width(8);
                columns.Bound(p => p.ProjectCode).Title("PROJ").Width(12);
                columns.Bound(p => p.PoNumber).Title("P.O No").Width(12).ClientTemplate("<a href='" + Url.RouteUrl("Default", new { controller = "Purchases/PurchaseOrders", action = "Edit" }) + "/#= PurchaseOrderID #'>#=PoNumber#</a>");
                columns.Bound(p => p.ProjectName).Title("Project Name").Width(180);
                columns.Bound(p => p.DeliveryDate).Title("Delivery").Format("{0:dd/MM/yyyy}").HtmlAttributes(new { @class = "grid-column-center" }).Width(8);
                columns.Bound(p => p.DueDate).Title("Deadline").Format("{0:dd/MM/yyyy}").HtmlAttributes(new { @class = "grid-column-center" }).Filterable(false).Width(8);
                columns.Bound(p => p.SupplierName).Title("Supplier").Width(150);
                columns.Bound(p => p.PaymentTermName).Title("Payment Terms").Width(150);
                columns.Bound(p => p.TotalGrossAmount).Title("Amount").Format("{0:n0}").HtmlAttributes(new { @class = "grid-number-column" }).Filterable(false).Width(20).ClientFooterTemplate("#= kendo.format('{0:n0}', sum) #").FooterHtmlAttributes(new { @class = "grid-number-column" });

                columns.Template(model => null).HtmlAttributes(new { @class = "grid-column-center" }).Width(120)
                    .ClientTemplate("<a class='k-button' style='padding-left:5px; min-width:28px; width:28px' href='" + Url.RouteUrl("Default", new { controller = "Purchases/PurchaseOrders", action = "Edit" }) + "/#= PurchaseOrderID #'><span class='k-icon k-edit'></span></a> <a class='k-button' style='padding-left:0px; padding-right:0px; min-width:28px; width:28px' href='" + Url.RouteUrl("Default", new { controller = "Purchases/PurchaseOrders", action = "Print" }) + "/#= PurchaseOrderID #'><span class='k-icon k-i-folder-add'></span></a> <a class='k-button' style='padding-left:0px; padding-right:0px; min-width:28px; width:28px' href='" + Url.RouteUrl("Default", new { controller = "Purchases/PurchaseOrders", action = "Delete" }) + "/#= PurchaseOrderID #'><span class='k-icon k-delete'></span></a>");
            })
            .ToolBar(toolbar =>
            {
                //toolbar.Custom().Action("Create", "PurchaseOrders");
                toolbar.Template(@<text> <button type="button" class="k-button" onclick="createWizard()"> <img src="~/Content/Images/Mains/Size24/folder-documents-icon-24.png" /> Create new purchase order </button> </text>);
            })
            .Pageable()
            .Groupable()
            .Filterable()
            .Selectable()
            .Sortable()
            .Events(e =>
            {
                e.DataBound("hightLightSelectedRow");
            })
            .DataSource(dataSource => dataSource
                .Ajax()
                .Group(group => group.AddDescending(p => p.ApprovedStatus))
                .Read(read => read.Action("GetPurchaseOrderIndexes", "PurchaseOrderAPIs", new { area = "Purchases" }))
                .Sort(sort =>
                    {
                        sort.Add(p => p.EntryDate).Descending();
                        sort.Add(p => p.PurchaseOrderID).Descending();
                    })
                .PageSize(20)
                .Model(model =>
                {
                    model.Id(x => x.PurchaseOrderID);
                    model.Field(m => m.PurchaseOrderID).DefaultValue(0);
                })
                .ServerOperation(true)
                .Aggregates(a => a.Add(x => x.TotalGrossAmount).Sum())
                )
            .HtmlAttributes(new { @class = "grid-class" }))
</div>



<script type="text/javascript">
    function hightLightSelectedRow(e) {
        require(["kindexGrid"], function (kindexGrid) {
            var kindexGridInstance = new kindexGrid("kendoGridIndex");
            kindexGridInstance.setSelectedRow("PurchaseOrderID", '@ViewBag.SelectedEntityID');
        });
    }

    function createWizard() {
        require(["kpopupWindow"], function (kpopupWindow) {
            var createWizardWindow = new kpopupWindow();
            createWizardWindow.openWindow($("#popupWindow"), "@Url.Action("CreateWizard", "PurchaseOrders")", "Select a project", 700, 320);
        });
    }



    decoratingKindex = function (idx, elem) {

        var isWarrantyClaim = elem.Approved;
        if (isWarrantyClaim == null || isWarrantyClaim == false) {
            $('tr[data-uid="' + elem.uid + '"]').addClass("isBonus");
        }
    }

</script>



