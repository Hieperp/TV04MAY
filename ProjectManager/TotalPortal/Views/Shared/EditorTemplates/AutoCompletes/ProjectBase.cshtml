@using TotalPortal.Configuration

@model TotalDTO.Commons.IProjectBaseDTO

@Html.HiddenFor(model => model.ProjectID)
@Html.HiddenFor(model => model.DueDate)
@Html.HiddenFor(model => model.ProjectAddress)

@Html.Hidden("TempName", (@Model != null ? @Model.Name : ""))

<div class="form-group">
    @Html.Label((ViewData["ProjectDisplayName"] != null ? (ViewData["ProjectDisplayName"]).ToString() : "Project"), new { @class = "right-panel-label" })
    <div class="div-input">
        @if (ViewData["Projectreadonly"] != null && (ViewData["Projectreadonly"]).ToString() == "true")
        {
            @Html.Kendo().MaskedTextBoxFor(model => model.Name).HtmlAttributes(new { @class = "right-panel-input", @readonly = "readonly" })
        }
        else
        {
            @(Html.Kendo().AutoCompleteFor(model => model.Name)
                .DataTextField("Name")
                .Filter("contains")
                .MinLength(SettingsManager.AutoCompleteMinLenght)
                    .Placeholder("Please key 3 letters to seach and select a project in order to conitune ... ")
                .DataSource(source =>
                {
                    source.Read(read =>
                    {
                        read.Action("SearchProjects", "ProjectAPIs", new { area = "Commons" }).Data(@<text> function(e) {return {searchText: e.filter.filters[0].value};} </text>);//Send parameter to controller search action
                    })
                    .ServerFiltering(true);
                })
                    .Events(e =>
                    {
                        e.Select("project_Select");
                    })
                    .HtmlAttributes(new { @class = "right-panel-input projectBase_AutoComplete" })
            )
        }
    </div>
    <div class="div-validation-message">
        @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
    </div>
</div>

<script type="text/javascript">

    getProjectModelID = function (modelID) {
        return modelID.substring(0, modelID.length - 4); //At first: Pass: modelID = this.element.attr('id') = 'Project_Name', Then: Return: ('Project_Name').substring(0, modelID.length - 4) = 'Project_'
    }

    project_Select = function (e) {
        var modelID = getProjectModelID(this.element.attr('id'));

        var dataItem = e.sender.dataItem(e.item.index());

        $("#" + modelID + "ProjectID").val(dataItem.ProjectID);
        $("#" + modelID + "DueDate").val(kendo.toString(JsonDateToDate(dataItem.DueDate), SettingsManager.DateTimeFormat));
        $("#" + modelID + "ProjectAddress").val(dataItem.ProjectAddress);

        //Remember last AutoComplete value
        $("#" + modelID + "TempName").val(dataItem.Name);

        //Trigger change event. This event is not used in this editor template. It will be catch out side of this editor template
        $("#" + modelID + "ProjectID").trigger("change");
    }

    $(".projectBase_AutoComplete").focusout(function (e) {
        var modelID = getProjectModelID(this.id);
        $(this).val($("#" + modelID + "TempName").val());
    });

</script>
